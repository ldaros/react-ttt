{"version":3,"sources":["Square.jsx","Board.jsx","Miniature.jsx","Game.jsx","index.js"],"names":["Square","props","color","className","onClick","value","Board","i","this","winner","includes","squares","rows","cols","j","push","renderSquare","Component","Miniature","data","current","elements","map","square","Game","state","history","Array","fill","xIsNext","stepNumber","historyOrder","order","setState","step","slice","length","calculateWinner","concat","sort","first","second","reverse","reversedHistory","status","moves","move","miniToColor","jumpTo","win_line","handleClick","sortHistory","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.02ba8e3e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./styles/Square.scss\";\r\n\r\n// square is just button with either X, O or nothing in it.\r\nexport default function Square(props) {\r\n  // if the square is part of the winning line\r\n  if (props.color)\r\n    return (\r\n      <button className=\"square color\" onClick={props.onClick}>\r\n        {props.value}\r\n      </button>\r\n    );\r\n\r\n  // normal square\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./styles/Board.scss\";\r\nimport Square from \"./Square\";\r\n\r\nexport default class Board extends Component {\r\n  // renderSquare function takes in a number and returns a square with the number as the value of the square.\r\n  renderSquare(i) {\r\n    let color;\r\n\r\n    // if the square is a winning square, change the color of the square to red.\r\n    if (this.props.winner != null && this.props.winner.includes(i)) {\r\n      color = 1;\r\n    } else color = 0;\r\n\r\n    return (\r\n      <Square\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n        color={color}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    // render 6 squares using the renderSquare function, use 2 loops.\r\n    let rows = [];\r\n    for (let i = 0; i < 3; i++) {\r\n      let cols = [];\r\n      for (let j = 0; j < 3; j++) {\r\n        cols.push(this.renderSquare(i * 3 + j));\r\n      }\r\n      rows.push(<div className=\"board-row\">{cols}</div>);\r\n    }\r\n    return <div>{rows}</div>;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./styles/Miniature.scss\";\r\n\r\n// Miniature component, displays a miniature of the board.\r\nexport default function Miniature(props) {\r\n  const squares = props.data; // Array of squares.\r\n  const current = props.current; // Current board.\r\n\r\n  const elements = squares.map((square, i) => {\r\n    return <p key={\"p\" + i}>{square ? square : \"\"}</p>;\r\n  });\r\n\r\n  // if current board, color the current mini board.\r\n  if (current) {\r\n    return (\r\n      <button className=\"Miniature color\" onClick={props.onClick}>\r\n        {elements}\r\n      </button>\r\n    );\r\n  } else {\r\n    return (\r\n      <button className=\"Miniature\" onClick={props.onClick}>\r\n        {elements}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./styles/Game.scss\";\r\nimport Board from \"./Board\";\r\nimport Miniature from \"./Miniature\";\r\n\r\nexport default class Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // initial state\r\n    this.state = {\r\n      history: [{ squares: Array(9).fill(null) }], // game history\r\n      xIsNext: true, // who's turn is it? x = true, o = false\r\n      stepNumber: 0, // current move\r\n      historyOrder: false, // order the display of history true = descending, false = ascending, this feature is kinda unessessary, but whatever\r\n    };\r\n  }\r\n\r\n  // change the order of the history\r\n  sortHistory(order) {\r\n    this.setState({\r\n      historyOrder: order,\r\n    });\r\n  }\r\n\r\n  // jump to a specific move in the game history and update the state accordingly.\r\n  jumpTo(step) {\r\n    this.setState({ stepNumber: step, xIsNext: step % 2 === 0 });\r\n  }\r\n\r\n  // handle click on a square in the board and update the state accordingly.\r\n  handleClick(i) {\r\n    // copy the history up to the current move (stepNumber) and add the new move to the end of the array\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1]; // get the current move\r\n    const squares = current.squares.slice(); // copy the squares array from the current move\r\n\r\n    // if the square is already occupied, return\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n\r\n    // update the squares array with the new move\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n\r\n    // update the state with the new history and the new squares array\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares,\r\n        },\r\n      ]),\r\n      stepNumber: history.length, // update the current move\r\n      xIsNext: !this.state.xIsNext, // update the turn\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let history = this.state.history; // get the history\r\n    const sort = this.state.historyOrder; // to sort or not to sort, that is the question\r\n    const current = history[this.state.stepNumber]; // get the current move\r\n    const winner = calculateWinner(current.squares); // get the winner, if any\r\n\r\n    // if sort is true, reverse history and leave the first move unchanged\r\n    if (sort) {\r\n      const first = history.slice(0, 1);\r\n      let second = history.slice(1, history.length);\r\n      second = second.reverse();\r\n      const reversedHistory = first.concat(second);\r\n      history = reversedHistory;\r\n    }\r\n\r\n    // create a list of moves in the game history\r\n    const moves = history.map((step, move) => {\r\n      let miniToColor = this.state.stepNumber; // color the current move, (it colors the selected too, i didn't intend to do that, but why not?)\r\n\r\n      // if sort is true, color the first move\r\n      if (sort) {\r\n        miniToColor = 1;\r\n      }\r\n\r\n      if (move) {\r\n        // return a miniaturized version of the board\r\n        return (\r\n          <li key={move}>\r\n            <Miniature\r\n              onClick={() => this.jumpTo(move)}\r\n              data={history[move].squares}\r\n              current={miniToColor === move} // is it the current move?\r\n            />\r\n          </li>\r\n        );\r\n      } else\r\n        return (\r\n          // return a button to the start of the game\r\n          <li key={move}>\r\n            <button onClick={() => this.jumpTo(move)}>\r\n              {\"Go to game start\"}\r\n            </button>{\" \"}\r\n          </li>\r\n        );\r\n    });\r\n\r\n    let status; // status message, that is displayed at the right of the board\r\n    if (winner) {\r\n      // if there is a winner\r\n      status = \"Winner: \" + winner[0]; // set the status message to the win condition\r\n    } else if (history.length === 10 && !calculateWinner(current.squares)) {\r\n      // if there is no winner and the game is over (draw)\r\n      status = \"Draw\";\r\n    } else {\r\n      // if there is no winner and the game is still in progress\r\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n    }\r\n\r\n    // get the winning line, if any (array of the indexes of the squares that form the line)\r\n    let win_line = calculateWinner(current.squares)\r\n      ? calculateWinner(current.squares)[1]\r\n      : null;\r\n\r\n    // render everything\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={(i) => this.handleClick(i)}\r\n            winner={win_line}\r\n          />{\" \"}\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <p>{status}</p> <ol>{moves}</ol>{\" \"}\r\n          <button onClick={() => this.sortHistory(!this.state.historyOrder)}>\r\n            Sort\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// helper function to see if there is a winner\r\nfunction calculateWinner(squares) {\r\n  // all possible winning lines\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n\r\n  // loop through all the winning lines\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      let winner = [squares[a], lines[i]];\r\n      return winner; // Hooray! We have a winner!\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n// Question: hey copilot, how good is this code?\r\n// Answer: it's pretty good, but it's not perfect.\r\n// Reply: neat, thanks!\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Game from \"./Game\";\n\nReactDOM.render(<Game />, document.getElementById(\"root\")); // render the game\n"],"sourceRoot":""}